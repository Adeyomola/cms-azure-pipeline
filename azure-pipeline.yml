variables:
  AWS_ACCESS_KEY_ID: $(access_key_id)
  AWS_SECRET_ACCESS_KEY: $(secret_access_key)
  AWS_DEFAULT_REGION: $(REGION)
  ANSIBLE_VAULT_PASSWORD_FILE:
  TF_VAR_db_user: $(USERNAME)
  TF_VAR_db_password: $(USERNAME)
  TF_VAR_db_name: $(DB_NAME)
  TF_VAR_db_port: 3306
  TF_VAR_arn: $(ARN)
  TF_VAR_email: $(email)
  TF_VAR_account_id: $(account_id)
  dockerhubPassword: $(docker_password)
  dockerhubUser: $(docker_username)
jobs:
  # - job: Create_Backend
  #   steps:
  #     - script: |
  #         terraform init -reconfigure
  #         terraform apply -auto-approve
  #       workingDirectory: backend
  # - job: Static_Application_Security_Testing_SonarQube
  #   steps:
  #     - script: |
  #         def scannerHome = tool 'sonarscanner'
  #         sh "${scannerHome}/bin/sonar-scanner"
  #       workingDirectory: docker
  - job: Deploy_CMS
    steps:
      - script: |
          echo hello
          echo world
      - script: docker build . -t wp
        workingDirectory: docker
        displayName: Docker Build
      - script: |
          echo $(docker_password) | docker login -u $(docker_username) --password-stdin
          docker tag wp adeyomola/wordpress
          docker push adeyomola/wordpress
          docker logout
        workingDirectory: docker
        displayName: Docker Push
      - script: |
          terraform init -reconfigure
          terraform apply -auto-approve
        workingDirectory: provision
        displayName: Create EKS Cluster
      - script: |
          terraform init -reconfigure
          terraform apply -auto-approve
        workingDirectory: ssl
        displayName: Create SSL Certificate
      - task: DownloadSecureFile@1
        name: ansiblePass
        displayName: "Download Ansible Vault Password File"
        inputs:
          secureFile: ".pass.txt"
      - bash: |
          terraform init -reconfigure
          terraform apply -auto-approve
        workingDirectory: ansible
        displayName: Convert Template Files
      - bash: |
          terraform init -reconfigure
          terraform apply -auto-approve
        workingDirectory: lb
        displayName: Deploy Ingress Controller
      - bash: |
          terraform init -reconfigure
          terraform apply -auto-approve
        workingDirectory: monitoring
        displayName: Deploy Prometheus and Grafana for Monitoring
      - bash: |
          terraform init -reconfigure
          terraform apply -auto-approve
        workingDirectory: logging
        displayName: Deploy Elastic Stack for Logging
      - bash: |
          trivy image adeyomola/wordpress
        #  trivy --exit-code 1 --no-progress --severity CRITICAL adeyomola/wordpress
        displayName: Scanning Image
      - bash: |
          terraform init -reconfigure
          terraform apply -auto-approve
        workingDirectory: deploy
        displayName: Deploy App
